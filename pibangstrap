#!/bin/bash

#Copyright (c) 2012
#James Bennet <github@james-bennet.com>, Klaus M Pfeiffer <klaus.m.pfeiffer@kmp.or.at>, "Super" Nathan Weber <supernathansunshine@gmail.com>

# This software is distributed under the MIT Zero Lisence

#Permission to use, copy, modify, and/or distribute this software for
#any purpose with or without fee is hereby granted, provided that the
#above copyright notice and this permission notice appear in all copies.

#THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
#WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
#OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
#FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY
#DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
#IN AN CTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
#OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

#******** PACKAGING NOTES ********
# I package for Debian, not Ubuntu or Debian deriviatives. In theory, any dist that has debootstrap should work, as the apt-get's are done inside the debian chroots.

#On the host, you need to get some build dependencies first:
#sudo apt-get -y install binfmt-support qemu qemu-user-static debootstrap kpartx lvm2 dosfstools git-core binutils ca-certificates ntp ntpdate openssh-server less vim screen multistrap schroot fakechroot cdebootstrap minicom bash debhelper devscripts

function main
{
# Hopefully we can keeps these steps simple.
init
checkRequirements
sayHello
getDevice
getBuildroot
getSuite
getArch
getDesktop
getMirror
getHostname
sayFinalWarning
checkDevice
partitionDevice
mountDevice
formatDevice
bootstrapDevice
configureBoot
configureSystem
networking
aptSetup
debConfSetup
thirdStage
fourthStage
launch
pibangApps
lightdmSetup
sshSafety
userSetup
motdSetup
raspiSetup
newNetwork
cleanUp
sayDone
}

function init
{
bootsize="64M" # Boot partition size on RPI.
mydate=`date +%Y%m%d`
mytime=`date +%H%M`
image=""
echo "
***************************
 Starting build at $mytime
***************************
" > /var/log/pibangstrap.log
}

function sayHello
{
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15

whiptail --title "RaspberryPi Card Builder v0.2" \
--msgbox "\n Please answer a few questions!" 0 0
}

# Force local image build, there used to an option to build on an SD-Card, but I found it buggy. This works everytime.
function getDevice
{
device=""
 }

# Let the user type in the location to use as a buildroot. This should be an (empty) directory where you want the new system to be populated. This directory will reflect the root filesystem of the new system. Note that the host system is not affected in any way, and all modifications are restricted to the directory you have chosen.
function getBuildroot
{
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15

whiptail --title "Enter path to use as the buildroot (Working directory)" --clear \
        --inputbox "Buildroot path:" 0 0 2> $tempfile

retval=$?

buildenv=`cat $tempfile`
rootfs="${buildenv}/rootfs"
bootfs="${rootfs}/boot"

case $retval in
  0)
     whiptail --infobox "Working in build root: ${buildenv}..." 0 0; sleep 1;;
  1)
    getDevice;;
  255)
    getDevice;;
esac
}

# Force wheezy
function getSuite
{
suite="wheezy"
}

# Force armhf
function getArch
{
arch="armhf"
}

# Choose if you want Openbox or i3
function getDesktop
{
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15

whiptail --clear --title "RaspberryPi Card Builder v0.2" \
        --menu "Please choose a desktop: " 0 0 0 \
        "openbox"  "The original PiBang desktop" \
        "i3" "An awesome tiling window manager"   \
        "NONE" "A basic server install" 2> $tempfile

retval=$?
pb_desktop=`cat $tempfile`

case $retval in
  0)
     whiptail --infobox "Building with: ${pb_desktop}..." 0 0; sleep 1;;
  1)
   getArch;;
  255)
    getArch;;
esac
}

# The main Archive (#3) is the best option for anyone not living in Asia. If you live in Suncheon, South Korea, you can call me up and but me beer, then it is cool if you use my mirror.
function getMirror
{
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15

whiptail --clear --title "RaspberryPi Card Builder v0.2" \
        --menu "Please choose a mirror: " 0 0 0 \
        "http://mirror.devunt.kr/raspbian/raspbian/"  "A Korean Mirror" \
        "http://archive.raspbian.org/raspbian" "The Main Mirror" 2> $tempfile

retval=$?
deb_mirror=`cat $tempfile`

case $retval in
  0)
     whiptail --infobox "Configuring mirror: ${deb_mirror}..." 0 0; sleep 1;;
  1)
   getArch;;
  255)
    getArch;;
esac
}


# Force Hostname
function getHostname
{
hostname="PiBang"
}


function sayFinalWarning
{
whiptail --yesno "This utility is free software and may go horribly wrong.\n\n\nYou are bootstrapping ${hostname} with a desktop of ${pb_desktop}, using ${suite} (${arch}), from ${deb_mirror} into ${buildenv}\n\nAre you SURE you want to Continue?" 0 0
rc=$?
if [ "${rc}" != "0" ]; then
  exit 1
fi
}

function checkRequirements
{
if [ $EUID -ne 0 ]; then
whiptail --title "RaspberryPi Card Builder v0.2" \
--msgbox "\n ERROR: This tool must be run with superuser rights!" 0 0 # Because debootstrap will create device nodes (using mknod) as well as chroot into the newly created system
  exit 1
fi
}

function checkDevice
{
if ! [ -b $device ]; then
whiptail --title "RaspberryPi Card Builder v0.2" \
--msgbox "\n ERROR: Device: ${device} is not a block device!" 0 0
  getDevice
else
whiptail --infobox "Device: ${device} OK..." 0 0; sleep 2;
fi
}

function partitionDevice
{
if [ "${pb_desktop}" = "openbox" -o "${pb_desktop}" = "i3" ] ; then
	if [ "$device" == "" ]; then
	  whiptail --infobox "Creating image." 0 0; sleep 2;
	  mkdir -p $buildenv  &>> /var/log/pibangstrap.log
	  image="${buildenv}/PiBang_${mydate}.img"
	  dd if=/dev/zero of=$image bs=1MB count=3900  &>> /var/log/pibangstrap.log
	  device=`losetup -f --show $image`
	  whiptail --infobox "Image: ${image} created and mounted as: ${device}" 0 0; sleep 2;
	else
	  whiptail --infobox "Partitioning Device ${device}" 0 0; sleep 1;
	  dd if=/dev/zero of=$device bs=512 count=1 &>> /var/log/pibangstrap.log
	fi
	
else
	if [ "$device" == "" ]; then
	  whiptail --infobox "Creating image." 0 0; sleep 2;
	  mkdir -p $buildenv  &>> /var/log/pibangstrap.log
	  image="${buildenv}/PiBang_${mydate}.img"
	  dd if=/dev/zero of=$image bs=1MB count=1900  &>> /var/log/pibangstrap.log
	  device=`losetup -f --show $image`
	  whiptail --infobox "Image: ${image} created and mounted as: ${device}" 0 0; sleep 2;
	else
	  whiptail --infobox "Partitioning Device ${device}" 0 0; sleep 1;
	  dd if=/dev/zero of=$device bs=512 count=1 &>> /var/log/pibangstrap.log
	fi
fi

fdisk $device << EOF
n
p
1

+$bootsize
t
c
n
p
2


w
EOF
}

function mountDevice
{
whiptail --infobox "Mounting Partitions..." 0 0; sleep 2;

if [ "$image" != "" ]; then
  losetup -d $device &>> /var/log/pibangstrap.log
  device=`kpartx -va $image | sed -E 's/.*(loop[0-9])p.*/\1/g' | head -1`
  device="/dev/mapper/${device}"
  bootp=${device}p1
  rootp=${device}p2
else
  if ! [ -b ${device}1 ]; then
    bootp=${device}p1
    rootp=${device}p2
    if ! [ -b ${bootp} ]; then
whiptail --title "RaspberryPi Card Builder v0.2" \
--msgbox "\n ERROR: Can't find boot partition, neither as: ${device}1, nor as: ${device}p1. Exiting!" 0 0
      exit 1 # TODO: retry?
    fi
  else
    bootp=${device}1
    rootp=${device}2
  fi
fi
}

function formatDevice
{
whiptail --infobox "Formatting Partitions ${bootp} and ${rootp}..." 0 0; sleep 3;

mkfs.vfat $bootp &>> /var/log/pibangstrap.log # Boot partition
mkfs.ext4 $rootp &>> /var/log/pibangstrap.log # Partition that will hold rootfs.

mkdir -p $rootfs &>> /var/log/pibangstrap.log
}

function bootstrapDevice
{
whiptail --infobox "Entering new filesystem at ${rootfs}..." 0 0; sleep 1;
mount $rootp $rootfs  &>> /var/log/pibangstrap.log
cd $rootfs  &>> /var/log/pibangstrap.log

whiptail --infobox "Bootstrapping into ${rootfs}..." 0 0; sleep 2;
# To bootstrap our new system, we run debootstrap, passing it the target arch and suite, as well as a directory to work in.
# FIXME: We do --no-check-certificate and --no-check-gpg to make raspbian work.
debootstrap --no-check-certificate --no-check-gpg --foreign --arch $arch $suite $rootfs $deb_mirror  2>&1 | tee -a /var/log/pibangstrap.log

whiptail --infobox "Second stage. Chrooting into ${rootfs}..." 0 0; sleep 2;
# To be able to chroot into a target file system, the qemu emulator for the target CPU needs to be accessible from inside the chroot jail.
cp /usr/bin/qemu-arm-static usr/bin/  &>> /var/log/pibangstrap.log
# Second stage - Run Post-install scripts.
LANG=C chroot $rootfs /debootstrap/debootstrap --no-check-certificate --no-check-gpg --second-stage  2>&1 | tee -a /var/log/pibangstrap.log
}

function configureBoot
{
whiptail --infobox "Configuring boot partition ${bootp} on ${bootfs}..." 0 0; sleep 1;
mount $bootp $bootfs  &>> /var/log/pibangstrap.log

#TODO: Configure /etc/inittab, and use USB serial console?
whiptail --infobox "Configuring bootloader..." 0 0; sleep 1;
echo "dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 rootwait" > boot/cmdline.txt

#The system you have just created needs a few tweaks so you can use it.
whiptail --infobox "Configuring fstab..." 0 0; sleep 1;
echo "proc            /proc           proc    defaults        0       0
/dev/mmcblk0p1  /boot           vfat    defaults        0       0
" > etc/fstab
}

function networking
{
whiptail --infobox "Setting hostname to ${hostname}..." 0 0; sleep 2;
echo $hostname > etc/hostname
printf "127.0.1.1\t$hostname\n" >> etc/hosts

whiptail --infobox "Configuring network adapters..." 0 0; sleep 2;

echo "auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
#testing
" > etc/network/interfaces
}

function configureSystem
{
# By default, debootstrap creates a very minimal system, so we will want to extend it by installing more packages.
# TODO: Use apt-setup? - deb-src?
whiptail --infobox "Configuring sources.list..." 0 0; sleep 1;
echo "deb $deb_mirror wheezy main contrib non-free
deb http://pibanglinux.org/repo/ pibang main
" > etc/apt/sources.list

# The (buggyish) analog audio driver for the SoC.
whiptail --infobox "Configuring kernel modules..." 0 0; sleep 1;
echo "vchiq
snd_bcm2835
" >> etc/modules


echo "pcm.mmap0 {
    type mmap_emul;
    slave {
      pcm \"hw:0,0\";
    }
}

pcm.!default {
  type plug;
  slave {
    pcm mmap0;
  }
}
" > etc/asound.conf

}

function aptSetup
{
echo "
apt-configure time
" >> /var/log/pibangstrap.log

echo "#!/bin/bash
sh -l -ex - <<\EOF
cat <<\EOF1 > /etc/apt/apt.conf.d/50raspi
# never use pdiffs. Current implementation is very slow on low-powered devices
Acquire::PDiffs \"0\";

# download up to 5 pdiffs:
#Acquire::PDiffs::FileLimit \"5\";
EOF1
EOF
rm -f apt
" > apt
chmod +x apt  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /apt  &>> /var/log/pibangstrap.log
}

#This is ONLY here because spindle did it first
#I attempted to set it to US not GB because that's what I like
function debConfSetup
{
echo "
deb-configure 
" >> /var/log/pibangstrap.log

echo "#!/bin/bash
sh -l -ex - <<EOF
debconf-set-selections <<SELEOF
# System's default wordlist:
# Choices: english (Webster's Second International English wordlist), Manual symlinks setting
dictionaries-common	dictionaries-common/default-wordlist	select	english (Webster's Second International English wordlist)
# Use Control+Alt+Backspace to terminate the X server?
keyboard-configuration keyboard-configuration/ctrl_alt_bksp boolean true
# Backend to use for TrueType handling on X:
# Choices: freetype, xtt
x-ttcidfont-conf	x-ttcidfont-conf/tt_backend	select	freetype
# Character set to support:
# Choices: . Arabic, # Armenian, # Cyrillic - KOI8-R and KOI8-U, # Cyrillic - non-Slavic languages, # Cyrillic - Slavic languages (also Bosnian and Serbian Latin), . Ethiopic, # Georgian, # Greek, # Hebrew, # Lao, # Latin1 and Latin5 - western Europe and Turkic languages, # Latin2 - central Europe and Romanian, # Latin3 and Latin8 - Chichewa; Esperanto; Irish; Maltese and Welsh, # Latin7 - Lithuanian; Latvian; Maori and Marshallese, . Latin - Vietnamese, # Thai, . Combined - Latin; Slavic Cyrillic; Hebrew; basic Arabic, . Combined - Latin; Slavic Cyrillic; Greek, . Combined - Latin; Slavic and non-Slavic Cyrillic
console-setup	console-setup/codeset47	select	. Combined - Latin; Slavic Cyrillic; Greek
# Time zone:
# Choices: GMT, GMT+0, GMT+1, GMT+10, GMT+11, GMT+12, GMT+2, GMT+3, GMT+4, GMT+5, GMT+6, GMT+7, GMT+8, GMT+9, GMT-0, GMT-1, GMT-10, GMT-11, GMT-12, GMT-13, GMT-14, GMT-2, GMT-3, GMT-4, GMT-5, GMT-6, GMT-7, GMT-8, GMT-9, GMT0, Greenwich, UCT, UTC, Universal, Zulu
tzdata	tzdata/Zones/Etc	select	UTC
# for internal use
console-setup   console-setup/store_defaults_in_debconf_db      boolean true
# Font for the console:
# Choices: Fixed, Terminus, TerminusBold, TerminusBoldVGA, VGA, Do not change the boot/kernel font
console-setup	console-setup/fontface47	select	Do not change the boot/kernel font
# Enable subpixel rendering for screen:
# Choices: Automatic, Always, Never
fontconfig-config	fontconfig/subpixel_rendering	select	Automatic
# Method for toggling between national and Latin mode:
# Choices: Caps Lock, Right Alt (AltGr), Right Control, Right Shift, Right Logo key, Menu key, Alt+Shift, Control+Shift, Control+Alt, Alt+Caps Lock, Left Control+Left Shift, Left Alt, Left Control, Left Shift, Left Logo key, Scroll Lock key, No toggling
keyboard-configuration	keyboard-configuration/toggle	select	No toggling
# Font size:
# Choices: 13, 14, 15, 16, 18
console-setup	console-setup/fontsize-text47	select	16
# Locales to be generated:
# Choices: <SNIP>
locales	locales/locales_to_be_generated	multiselect	en_US.UTF-8 UTF-8
# Keyboard model:
# Choices: <SNIP>
keyboard-configuration	keyboard-configuration/model	select	Generic 105-key (Intl) PC
# Users allowed to start the X server:
# Choices: Root Only, Console Users Only, Anybody
x11-common	x11-common/xwrapper/allowed_users	select	Anybody
# Compose key:
# Choices: No compose key, Right Alt (AltGr), Right Control, Right Logo key, Menu key, Left Logo key, Caps Lock
keyboard-configuration	keyboard-configuration/compose	select	No compose key
# Country of origin for the keyboard:
# Choices: <SNIP>
keyboard-configuration  keyboard-configuration/layout select English (US)
# for internal use
keyboard-configuration  keyboard-configuration/layoutcode string gb
# Keymap to use:
# Choices: <SNIP>
keyboard-configuration	keyboard-configuration/xkb-keymap	select	American English
# Choices: English (UK), English (UK) - English (UK\, Colemak), English (UK) - English (UK\, Dvorak), English (UK) - English (UK\, Dvorak with UK punctuation), English (UK) - English (UK\, extended WinKeys), English (UK) - English (UK\, international with dead keys), English (UK) - English (UK\, Macintosh), English (UK) - English (UK\, Macintosh international), Other
keyboard-configuration  keyboard-configuration/variant select English (US)
# Geographic area:
# Choices: Africa, America, Antarctica, Australia, Arctic, Asia, Atlantic, Europe, Indian, Pacific, SystemV, US, Etc
tzdata	tzdata/Areas	select	Etc
# Method for temporarily toggling between national and Latin input:
# Choices: No temporary switch, Both Logo keys, Right Alt (AltGr), Right Logo key, Left Alt, Left Logo key
keyboard-configuration	keyboard-configuration/switch	select	No temporary switch
# Encoding to use on the console:
# Choices: ARMSCII-8, CP1251, CP1255, CP1256, GEORGIAN-ACADEMY, GEORGIAN-PS, IBM1133, ISIRI-3342, ISO-8859-1, ISO-8859-10, ISO-8859-11, ISO-8859-13, ISO-8859-14, ISO-8859-15, ISO-8859-16, ISO-8859-2, ISO-8859-3, ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8, ISO-8859-9, KOI8-R, KOI8-U, TIS-620, UTF-8, VISCII
console-setup	console-setup/charmap47	select	UTF-8
# Font tuning method for screen:
# Choices: Native, Autohinter, None
fontconfig-config	fontconfig/hinting_type	select	Native
# Font size:
# Choices: 
console-setup	console-setup/fontsize-fb47	select	16
# The desktop environment to install when the desktop task is selected
# Choices: gnome, kde, xfce
tasksel	tasksel/desktop	multiselect	xfce
# Key to function as AltGr:
# Choices: The default for the keyboard layout, No AltGr key, Right Alt (AltGr), Right Control, Right Logo key, Menu key, Left Alt, Left Logo key, Keypad Enter key, Both Logo keys, Both Alt keys
keyboard-configuration	keyboard-configuration/altgr	select	The default for the keyboard layout
# Default locale for the system environment:
# Choices: None, en_GB.UTF-8
locales	locales/default_environment_locale select	en_US.UTF-8
SELEOF
EOF
rm -f deb
" > deb
chmod +x deb  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /deb  2>&1 | tee -a /var/log/pibangstrap.log
}


# This will only get you a console and an X-server, For our i3wm spin we can leave this and stage 4
function thirdStage
{
whiptail --infobox "Third stage. Installing packages..." 0 0; sleep 2;

echo "
*****************
    Stage 3
*****************
" >> /var/log/pibangstrap.log

# Install things we need in order to grab and build firmware from github, and to work with the target remotely. Also, NTP as the date and time will be wrong, due to no RTC being on the board. This is important, as if you get errors relating to certificates, then the problem is likely due to one of two things. Either the time is set incorrectly on your Raspberry Pi, which you can fix by simply setting the time using NTP. The other possible issue is that you might not have the ca-certificates package installed, and so GitHub's SSL certificate isn't trusted.
if [ "${pb_desktop}" = "openbox" -o "${pb_desktop}" = "i3" ] ; then
echo "#!/bin/bash
#debconf-set-selections /debconf.set
#rm -f /debconf.set
apt-get  update
wget -O - http://pibanglinux.org/repo/Publickeylong.gpg.key | apt-key add -
apt-get -y install git-core binutils ca-certificates locales console-common ntp ntpdate openssh-server less vim screen 
apt-get install --no-install-recommends -y xserver-xorg-video-fbdev
apt-get install --no-install-recommends -y xserver-xorg xinit 
apt-get install -y libgl1-mesa-dri htop xterm zsh
wget  -q http://raw.github.com/Hexxeh/rpi-update/master/rpi-update -O /usr/bin/rpi-update
chmod +x /usr/bin/rpi-update
mkdir -p /lib/modules/3.1.9+
mkdir -p /lib/modules/3.6.11+
touch /boot/start.elf
rpi-update
echo \"root:raspberry\" | chpasswd
sed -i -e 's/KERNEL\!=\"eth\*|/KERNEL\!=\"/' /lib/udev/rules.d/75-persistent-net-generator.rules
apt-get  update && yes | apt-get upgrade
rm -f /etc/udev/rules.d/70-persistent-net.rules
rm -f third-stage
" > third-stage
chmod +x third-stage  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /third-stage  2>&1 | tee -a /var/log/pibangstrap.log


else
echo "#!/bin/bash
#debconf-set-selections /debconf.set
#rm -f /debconf.set
apt-get  update
wget -O - http://pibanglinux.org/repo/Publickeylong.gpg.key | apt-key add -
apt-get -y install git-core binutils ca-certificates locales console-common ntp ntpdate openssh-server less vim screen 
apt-get install -y htop zsh
wget  -q http://raw.github.com/Hexxeh/rpi-update/master/rpi-update -O /usr/bin/rpi-update
chmod +x /usr/bin/rpi-update
mkdir -p /lib/modules/3.6.11+
touch /boot/start.elf
rpi-update
echo \"root:raspberry\" | chpasswd
sed -i -e 's/KERNEL\!=\"eth\*|/KERNEL\!=\"/' /lib/udev/rules.d/75-persistent-net-generator.rules
apt-get  update && yes | apt-get upgrade
rm -f /etc/udev/rules.d/70-persistent-net.rules
rm -f third-stage
" > third-stage
chmod +x third-stage  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /third-stage  2>&1 | tee -a /var/log/pibangstrap.log
fi
}

#This is system utils and such
function fourthStage
{
whiptail --infobox "fourth stage. Installing packages..." 0 0; sleep 2;

echo "
*****************
    Stage 4
*****************
" >> /var/log/pibangstrap.log

if [ "${pb_desktop}" = "i3" -o "${pb_desktop}" = "openbox" ] ; then
echo "#!/bin/bash
apt-get install -y ssh locales less fbset sudo psmisc strace module-init-tools ifplugd ed ncdu
apt-get install -y console-setup keyboard-configuration debconf-utils parted unzip
apt-get install -y build-essential manpages-dev python bash-completion gdb pkg-config
# Install stuff for wireless
apt-get install -y wpasupplicant wireless-tools firmware-atheros firmware-brcm80211 firmware-libertas firmware-ralink firmware-realtek
/etc/init.d/fake-hwclock stop # save current time
update-rc.d hwclock.sh disable
# Don't need to start these by default, wastes boot time
update-rc.d nfs-common disable
update-rc.d rpcbind disable
apt-get install -y mupdf gtk2-engines alsa-utils
apt-get install -y --no-install-recommends netsurf-gtk zenity xdg-utils
apt-get install -y python idle python-tk
apt-get install -y python3 idle3 python3-tk 
apt-get install -y xfonts-base xarchiver
apt-get install -y dosfstools reiserfsprogs xfsprogs btrfs-tools
rm -f fourth-stage 
" > fourth-stage
chmod +x fourth-stage  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /fourth-stage  2>&1 | tee -a /var/log/pibangstrap.log


else
echo "#!/bin/bash
apt-get install -y ssh locales less fbset sudo psmisc strace module-init-tools ifplugd ed ncdu 
apt-get install -y console-setup keyboard-configuration debconf-utils parted unzip
apt-get install -y build-essential manpages-dev python bash-completion gdb pkg-config
# Install stuff for wireless
apt-get install -y wpasupplicant wireless-tools firmware-atheros firmware-brcm80211 firmware-libertas firmware-ralink firmware-realtek
/etc/init.d/fake-hwclock stop # save current time
update-rc.d hwclock.sh disable
# Don't need to start these by default, wastes boot time
update-rc.d nfs-common disable
update-rc.d rpcbind disable
apt-get install -y alsa-utils
apt-get install -y python
apt-get install -y python3
apt-get install -y dosfstools reiserfsprogs xfsprogs btrfs-tools
rm -f fourth-stage 
" > fourth-stage
chmod +x fourth-stage  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /fourth-stage  2>&1 | tee -a /var/log/pibangstrap.log

fi
}

# with this much talk about stages we need a rocket.
function launch
{
echo "" 2>&1 | tee -a /var/log/pibangstrap.log
echo "" 2>&1 | tee -a /var/log/pibangstrap.log
echo "  @>=----\ " 2>&1 | tee -a /var/log/pibangstrap.log
echo "      \   ============== \ " 2>&1 | tee -a /var/log/pibangstrap.log
echo "   @>=   PiBang Linux !   ==> " 2>&1 | tee -a /var/log/pibangstrap.log
echo "      /   ============== / " 2>&1 | tee -a /var/log/pibangstrap.log
echo "  @>=----/        " 2>&1 | tee -a /var/log/pibangstrap.log	
echo "" 2>&1 | tee -a /var/log/pibangstrap.log
echo "" 2>&1 | tee -a /var/log/pibangstrap.log
}

#This should only be for X-dependant apps and pibang stuff. In theory, this is what seperates us from Raspbian.
function pibangApps
{
whiptail --infobox "PiBang magic stage. Installing packages..." 0 0; sleep 4;

if [ "${pb_desktop}" = "i3" ] ; then
echo "
PiBang Magic stage
" >> /var/log/pibangstrap.log 
echo "#!/bin/bash
apt-get install -y  nitrogen aptitude i3-wm i3status libwebkitgtk-3.0-0
apt-get install --no-install-recommends -y midori
sed -i /etc/xdg/midori/search -e '/duckduckgo.com/s|$|\&t=PiBang|'
apt-get install -y omxplayer
apt-get install -y smallweb sudo 
apt-get install -y gksu
apt-get install -y thunar thunar-volman terminator xscreensaver xfce4-notifyd
apt-get install -y abiword abiword-common abiword-plugin-grammar abiword-plugin-mathview blueman catfish network-manager-gnome dmenu
apt-get install -y gmrun geany catfish gimp gpicview gftp transmission-gtk xchat gigolo evince arandr lxappearance  clipit sl telnet
apt-get install -y gparted synaptic gmrun xfce4-screenshooter ceni arandr gimp scrot volumeicon-alsa vlc recordmydesktop
# This is the pibang specific stuff
apt-get install -y pibang-configs pibang-backgrounds cb-welcome pbmenu-apps pibang-keyring borrowed-crunchbang-themes pibang-backgrounds-contrib oc-change
apt-get install -y  pibang-core-i3
sed /etc/NetworkManager/NetworkManager.conf -i -e \"s/managed=false/managed=true/\"
rm -f pibangSetup 
" > pibangSetup
chmod +x pibangSetup  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /pibangSetup  2>&1 | tee -a /var/log/pibangstrap.log

elif [ "${pb_desktop}" = "openbox" ] ; then
echo "
PiBang Magic stage
" >> /var/log/pibangstrap.log 
echo "#!/bin/bash
apt-get install -y openbox obconf obmenu tint2 nitrogen conky aptitude libwebkitgtk-3.0-0
apt-get install --no-install-recommends -y midori
sed -i /etc/xdg/midori/search -e '/duckduckgo.com/s|$|\&t=PiBang|'
apt-get install -y omxplayer
apt-get install -y smallweb sudo
apt-get install -y gksu
apt-get install -y thunar thunar-volman terminator xscreensaver xfce4-notifyd
apt-get install -y abiword abiword-common abiword-plugin-grammar abiword-plugin-mathview blueman catfish network-manager-gnome dmenu
apt-get install -y gmrun geany catfish gimp gpicview gftp transmission-gtk xchat gigolo evince arandr lxappearance  clipit sl telnet
apt-get install -y gparted synaptic xcompmgr gmrun xfce4-screenshooter ceni arandr gimp scrot volumeicon-alsa vlc hsetroot
# This is the pibang specific stuff
apt-get install -y cb-exit cb-pipemenus   borrowed-crunchbang-themes 
apt-get install -y pbmenu-apps cb-welcome pibang-configs pibang-backgrounds  pibang-keyring pbmenu-apps pibang-backgrounds-contrib oc-change
apt-get install -y  pibang-core
sed /etc/NetworkManager/NetworkManager.conf -i -e \"s/managed=false/managed=true/\"
rm -f pibangSetup 
" > pibangSetup
chmod +x pibangSetup  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /pibangSetup  2>&1 | tee -a /var/log/pibangstrap.log

else
echo "
PiBang Magic stage
" >> /var/log/pibangstrap.log 
echo "
apt-get install -y  rsync curl wget molly-guard
apt-get install -y  pbmenu-apps cb-welcome ceni mwt aptitude telnet sl pibang-configs htop powertop nmon iftop iotop sudo
apt-get install -y  pibang-server
rm -f pibangSetup 
" > pibangSetup
chmod +x pibangSetup  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /pibangSetup  2>&1 | tee -a /var/log/pibangstrap.log
fi
}

#lightdm this is our login manager, not needed for CLI-only setups
function lightdmSetup
{
whiptail --infobox "lightdm. Installing packages..." 0 0; sleep 2;
if [ "${pb_desktop}" = "i3" -o "${pb_desktop}" = "openbox" ] ; then
echo "
#!/bin/bash
apt-get install -y lightdm gnome-themes-standard gnome-icon-theme
update-rc.d lightdm disable 2
rm -f lightdm 
" > lightdm
chmod +x lightdm  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /lightdm  &>> /var/log/pibangstrap.log

else
echo "no login magager" | tee -a /var/log/pibangstrap.log
fi
}

# This doesnt really work with ZSH and my current config. It's just a nice idea to have this around for BASH
function motdSetup
{
echo "#!/bin/bash
sh -l -e <<\EOF1
cat <<EOF2 >> /etc/motd.tail

Type 'startx' to launch a graphical session

EOF2
cat <<EOF3 > /etc/motd
The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

PiBang Linux and Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY!
This is to the extent permitted by applicable law.
EOF3
EOF1
rm -f motdSetup
" > motdSetup
chmod +x motdSetup  &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /motdSetup  &>> /var/log/pibangstrap.log
}

# WE NO LONGER create a default user! From now on making a user will be done during rasp-setup
function userSetup
{
	
whiptail --infobox "User Setup. Installing packages..." 0 0; sleep 2;

echo "
*****************
USER-related stuff
*****************
" >> /var/log/pibangstrap.log

echo "
#!/bin/bash
passwd -d root
chmod -R 777 /usr/share/backgrounds
chmod -R 777 /usr/share/pixmaps
chmod -R 777 /usr/share/icons
chmod -R 777 /usr/share/themes
rm -f userSetup.sh
" >userSetup.sh

cp $rootfs/etc/skel/.zshrc $rootfs/root/ 2>&1 | tee -a /var/log/pibangstrap.log


#this will give a more custom i3 status
cp /usr/lib/libs-pistrap/i3status.conf $rootfs/etc/ 2>&1 | tee -a /var/log/pibangstrap.log

# now back to work........
chmod +x userSetup.sh  &>> /var/log/pibangstrap.log 2>&1 | tee -a /var/log/pistrap.log
LANG=C chroot $rootfs /userSetup.sh  2>&1 | tee -a /var/log/pibangstrap.log
}

function raspiSetup
{
whiptail --infobox "Raspi Setup Time. If the program autoloads as it has in testing, DO NOT RUN THROUGH IT. Just hit escape and do it on first boot." 0 0; sleep 10;

echo "
*****************
   Raspi-Setup
*****************
" >> /var/log/pibangstrap.log


wget https://raw.github.com/super-nathan/rpi-config/master/config.txt -O $rootfs/boot/config.txt
chmod +x $rootfs/boot/config.txt


# this will reset the sources from my Korean mirror if you chose the regular mirror this is redundant
# Since the Korean mirror is faster, but is relient on a sync, it might be as far as a day behind the main
# This will also update it.
echo "deb http://archive.raspbian.org/raspbian/ wheezy main contrib non-free
deb http://pibanglinux.org/repo/ pibang main
" > etc/apt/sources.list
sleep 5s

if [ "${pb_desktop}" = "openbox" -o "${pb_desktop}" = "i3" ] ; then
	echo "
	#!/bin/bash
	apt-get update ; yes | apt-get upgrade
	sleep 5s
	apt-get install -y  lua5.1 triggerhappy
	apt-get install -y  raspi-setup
	rm -f stuff.sh
	" > stuff.sh
	chmod +x stuff.sh  &>> /var/log/pibangstrap.log 2>&1 | tee -a /var/log/pistrap.log
	LANG=C chroot $rootfs /stuff.sh  2>&1 | tee -a /var/log/pibangstrap.log
	cp /usr/lib/libs-pistrap/profile $rootfs/etc/profile.d/raspi-config.sh  2>&1 | tee -a /var/log/pibangstrap.log
	chmod +x etc/profile.d/raspi-config.sh  | tee -a /var/log/pibangstrap.log
	
else
	echo "
	#!/bin/bash
	apt-get update ; yes | apt-get upgrade
	sleep 5s
	apt-get install -y lua5.1 triggerhappy
	apt-get install -y server-setup
	rm -f stuff.sh
	" > stuff.sh
	chmod +x stuff.sh  &>> /var/log/pibangstrap.log 2>&1 | tee -a /var/log/pistrap.log
	LANG=C chroot $rootfs /stuff.sh  2>&1 | tee -a /var/log/pibangstrap.log
	cp /usr/lib/libs-pistrap/serverprofile $rootfs/etc/profile.d/raspi-config.sh  2>&1 | tee -a /var/log/pibangstrap.log
	chmod +x etc/profile.d/raspi-config.sh  | tee -a /var/log/pibangstrap.log
fi



cp /usr/lib/libs-pistrap/inittab $rootfs/etc/inittab  2>&1 | tee -a /var/log/pibangstrap.log
cp /usr/lib/libs-pistrap/raspiSetup.sh $rootfs/raspiSetup.sh   2>&1 | tee -a /var/log/pibangstrap.log
chmod +x raspiSetup.sh  &>> /var/log/pibangstrap.log 2>&1 | tee -a /var/log/pistrap.log
LANG=C chroot $rootfs /raspiSetup.sh  2>&1 | tee -a /var/log/pibangstrap.log
rm -f raspiSetup.sh
}

function sshSafety
{
	
whiptail --infobox "SSH. Installing packages..." 0 0; sleep 2;

echo "
*****************
      SSH
*****************
" >> /var/log/pibangstrap.log
cp /usr/lib/libs-pistrap/ssh.sh $rootfs/ssh.sh 2>&1 | tee -a /var/log/pibangstrap.log
chmod +x ssh.sh  &>> /var/log/pibangstrap.log 2>&1 | tee -a /var/log/pistrap.log
LANG=C chroot $rootfs /ssh.sh  2>&1 | tee -a /var/log/pibangstrap.log
rm -f ssh.sh
}

function newNetwork
{
echo "
[nm-applet]
Identity=unix-group:netdev
Action=org.freedesktop.NetworkManager.*
ResultAny=yes
ResultInactive=no
ResultActive=yes
" > $rootfs/etc/polkit-1/localauthority/50-local.d/org.freedesktop.NetworkManager.pkla
}


function cleanUp
{
whiptail --infobox "Cleaning up..." 0 0; sleep 2;


sleep 30s &&
# Tidy up afterward
echo "#!/bin/bash
apt-get -qq clean
rm -f cleanup
" > cleanup
chmod +x cleanup &>> /var/log/pibangstrap.log
LANG=C chroot $rootfs /cleanup &>> /var/log/pibangstrap.log

cd

umount $bootp 2>&1 | tee -a /var/log/pibangstrap.log
sleep 2s
umount $rootp 2>&1 | tee -a /var/log/pibangstrap.log

if [ "$image" != "" ]; then
  kpartx -d $image &>> /var/log/pibangstrap.log
  whiptail --infobox "Created Image: ${image}." 0 0; sleep 2;
fi

notify-send -i /usr/lib/libs-pistrap/pb-white.png "Do you want a ZIP archive?"


whiptail --yesno "Do you want to make a zip archive of your new image?" 0 0
rcb=$?
if [ "${rcb}" != "0" ]; then
  sayDone
else
	cd $buildenv
	zip -j pibang.img.zip $image | tee -a /var/log/pibangstrap.log
	sha1sum pibang.img.zip | tee -a /var/log/pibangstrap.log
fi
}

function sayDone
{
notify-send -i /usr/lib/libs-pistrap/pb-white.png "It's all done boss"

whiptail --title "RaspberryPi Card Builder v0.2" \
--msgbox "\n Done!" 0 0

echo "
*****************
      done
*****************
" >> /var/log/pibangstrap.log

cp /var/log/pibangstrap.log $buildenv/pistrap-ob.log.txt
cd $buildenv

}

#RUN
main
